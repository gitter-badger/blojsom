version: 2
jobs:
  build:
    working_directory: ~/timothystone/blojsom
    parallelism: 1
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see 
    # https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    docker:
    - image: circleci/openjdk:8u232-jdk-stretch
    steps:
    # Machine Setup
    # If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are 
    # relevant in each The following `checkout` command checks out your code to your working directory. In 1.0 we did this 
    # implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - add_ssh_keys:
        fingerprints:
          - "93:57:06:37:3c:05:e7:3d:09:d8:04:99:a6:35:fe:dd"
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch 
        # configured correctly
        - v1-dep-
    - run: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        - ~/.m2
    - run: mvn package
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your 
    # project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred 
    # commands if they are not relevant to your project.
    - run: mvn integration-test
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are 
    # relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
